{"version":3,"file":"main.js","mappings":";;;;;;;;;;;AAAA;;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;ACNqB;AACrB;AACA;AACA;AACA,OAAO,QAAc;AACrB;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,E","sources":["webpack://toomanyproxies-frontend/./assets/index.css?6d3f","webpack://toomanyproxies-frontend/webpack/bootstrap","webpack://toomanyproxies-frontend/webpack/runtime/make namespace object","webpack://toomanyproxies-frontend/./assets/index.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport {};","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import './index.css';\r\n\r\nconst boot = new TOMPBoot({\r\n\tnoscript: false,\r\n\tbare: BARE_DIRECTORY,\r\n\tloglevel: 0, // LOG_TRACE\r\n});\r\n\r\nconst search = new TOMPBoot.SearchBuilder('https://searx.ru/search?q=%s');\r\n\r\nconst form = document.querySelector('.main');\r\nconst input = document.querySelector('.main > input');\r\nconst error_node = document.querySelector('.error');\r\n\r\nboot.ready.catch(error => {\r\n\terror_node.textContent = error.toString();\r\n});\r\n\r\nform.addEventListener('submit', async event => {\r\n\tevent.preventDefault();\r\n\t\r\n\tawait boot.ready;\r\n\r\n\tlocation.assign(boot.html(search.query(input.value)));\r\n});"],"names":[],"sourceRoot":""}